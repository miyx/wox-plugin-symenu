import os
import zipfile
import fnmatch
import xml.etree.ElementTree as etree

class SyMenu():
    '''The class is meant for the actual processing on a SyMenu item xml file.

    The xml file contains information about the current configuration of programs
    available in the SyMenu start menu. The xml file is stored in an archive file
    and needs to be extracted first.

    The actual query is done by the find_items() method and returns a Wox API
    compatible list of dictionaries.

    '''

    # NOTE: Exclude this to config?
    _SYMENU_ZIP_FILE = 'SyMenuItem.zip'
    _SYMENU_CONFIG_FOLDER = 'config'

    _SYMENU_XML_FILE = 'SyMenuItem.xml'
    _SYMENU_PROGRAM_XML_ITEM = 'SyProgramCmd'

    def __init__(self, symenu_root, software_root):
        '''

        Args:
            symenu_root (str): Path to the SyMenu program root on the system.
                The path is defined in 'config.json' file of the plug-in.
            software_root (str): Path to the actual portable software managed by SyMenu.
                The path is defined in 'config.json' file of the plug-in. It's
                required to resolve relative path definitions made by SyMenu.

        '''

        self.symenu_root = symenu_root
        self.software_root = software_root
        self.items_data = self._get_xml_data()

    def _get_xml_data(self):
        '''Gets the data from a ZIP archive.

        Returns:
            bytes: XML data in byte format

            The data is read from SyMenuItems ZIP archive.

        '''

        items_zip_file = os.path.join(  self.symenu_root,
                                        SyMenu._SYMENU_CONFIG_FOLDER,
                                        SyMenu._SYMENU_ZIP_FILE)
        xml_data = None

        if os.path.isfile(items_zip_file):

            # TODO: Detailed exception handling
            # NOTE: File close required?
            try:
                zip = zipfile.ZipFile(items_zip_file)
            except:
                pass

            # TODO: Detailed exception handling
            # NOTE: File close required?
            try:
                xml_data = zip.read(SyMenu._SYMENU_XML_FILE)
            except KeyError:
                pass

        print (type(xml_data))
        return xml_data

    def find_items(self, query):
        '''Does a query on the SyMenu item file and is called by Wox.

        This method is inherited from Wox() and needs to be overriden.

        Args:
            query (str): The query string.

        Returns:
            list: A list of directories compatible with the Wox API.

            Every match of the query is represented by a dictionary.
            The following keys are used:

            Title - The program name.
            SubTitle - The full path to the exe.
            IcoPath - The full path to a icon file. Generated by SyMenu.
            JsonRPCAction - Another dictionary with these keys:

            method - 'open_process' the method to call when item is selected
            parameters - path to application

            The list can be empty also.

        '''

        results = []

        root = etree.fromstring(self.items_data)

        for prg_item in root.iter(SyMenu._SYMENU_PROGRAM_XML_ITEM):

            name = path = icon = ''

            for prg in prg_item:

                if prg.tag == 'name':
                    name = prg.text

                if prg.tag == 'path':
                    # FIXME: Real path join
                    path = os.path.join(self.software_root + prg.text[2:])

                if prg.tag == 'icon':
                    # FIXME: Real path join
                    icon = os.path.join(self.software_root, 'SyMenu' + prg.text[1:])

            if fnmatch.fnmatch(name, '*' + query + '*') or query == '':
                results.append({'Title': name,
                                'SubTitle': path,
                                'IcoPath': icon,
                                'JsonRPCAction': {'method': 'open_process', 'parameters': [path]}})

        return results
